<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



  

<title type="text">Coding Adventures!</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000//feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000//" />
<updated>2014-07-06T16:07:02+01:00</updated>
<id>http://localhost:4000//</id>
<author>
  <name>Ruban Siva</name>
  <uri>http://localhost:4000//</uri>
  <email>rubansiva@hotmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Autocomplete Control Using Rx]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000//autocomplete-control-using-rx/"/>
  <id>http://localhost:4000//autocomplete-control-using-rx</id>
  <published>2014-07-02T00:00:00+01:00</published>
  <updated>2014-07-02T00:00:00+01:00</updated>
  <author>
    <name>Ruban Siva</name>
    <uri>http://localhost:4000/</uri>
    <email>rubansiva@hotmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;While attempting to implement a “Goggle search like” auto complete control, I looked at different ways of doing it. 
What I wanted was to have a Auto complete text box ( similar to Google Search) which would display possible results on each keystroke with some sort of minimum delay so that search is not executed until really necessary.
Using the Telerik RadAutoComplete WPF control, the usual way would have been to using event handlers to capture key strokes onkeydown event and then perform the search. However, using RX (Reactive Extensions) I found it’s much simpler and able to achieve the objective with less code.&lt;/p&gt;

&lt;p&gt;To start with, the original example (without Rx) is available here:
&lt;a href=&quot;http://blogs.telerik.com/xamlteam/posts/14-04-30/how-to-add-minimum-populate-delay-in-radautocompletebox-for-wpf-sliverlight&quot;&gt;http://blogs.telerik.com/xamlteam/posts/14-04-30/how-to-add-minimum-populate-delay-in-radautocompletebox-for-wpf-sliverlight&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The original code which handled the onkey event handlers and search:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MainWindow()
{
    InitializeComponent();
    this.timer.Interval = TimeSpan.FromSeconds((this.DataContext as ViewModel).SelectedDelay);
    this.AutoCompleteBox.AddHandler(Control.KeyDownEvent, new KeyEventHandler(OnAutoCompleteBoxKeyDown), true);
}

private void OnAutoCompleteBoxSearchTextChanged(object sender, EventArgs e)
{
    if (this.isDeleting || string.IsNullOrEmpty(this.AutoCompleteBox.SearchText))
    {
        this.AutoCompleteBox.Populate(string.Empty);
    }
    else
    {
        if (this.timer != null &amp;amp;&amp;amp; this.timer.IsEnabled)
        {
            this.timer.Stop();
            this.timer.Start();
        }
        else
        {
            if (this.timer != null)
            {
                this.timer.Start();
                this.timer.Tick += OnTimerTick;
            }
        }

        this.SetStatusBusyIndicator(true);
        this.DisabledOverlay.Visibility = System.Windows.Visibility.Visible;
    }

    this.isHandled = true;
}

private void OnTimerTick(object sender, EventArgs e)
{
    this.timer.Stop();
    this.SetStatusBusyIndicator(false);
    this.DisabledOverlay.Visibility = System.Windows.Visibility.Collapsed;
    this.isHandled = false;
    if (!this.isDeleting)
    {
        this.AutoCompleteBox.Populate(this.AutoCompleteBox.SearchText);
    }
}

private void OnAutoCompleteBoxPopulating(object sender, CancelRoutedEventArgs e)
{
    e.Cancel = this.isHandled;
}

private void OnAutoCompleteBoxKeyDown(object sender, KeyEventArgs e)
{
    if (e.Key == Key.Back || e.Key == Key.Delete || e.Key == Key.Escape || (Keyboard.Modifiers == ModifierKeys.Control &amp;amp;&amp;amp; e.Key == Key.X))
    {
        this.isDeleting = true;
        this.AutoCompleteBox.IsDropDownOpen = false;
        this.SetStatusBusyIndicator(false);
        this.DisabledOverlay.Visibility = System.Windows.Visibility.Collapsed;
    }
    else
    {
        if (e.Key != Key.Up &amp;amp;&amp;amp; e.Key != Key.Down)
        {
            this.AutoCompleteBox.IsDropDownOpen = false;
            if (e.Key == Key.Enter &amp;amp;&amp;amp; this.isDeleting)
            {
                this.isHandled = false;
                this.AutoCompleteBox.Populate(this.AutoCompleteBox.SearchText);
            }
        }

        this.isDeleting = false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Reactive UI (based on Rx), I was able to refactor it down to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	public ViewModel()
    {
        //GetItems();
        this.delays = new ObservableCollection&amp;lt;int&amp;gt;()
        {
            1, 2, 3, 4, 5
        };
        this.selectedDelay = this.delays[1];

        var executeSearchCommand = new ReactiveCommand();
        var results = executeSearchCommand.RegisterAsyncFunction(s =&amp;gt; { return ExecuteSearch(s as string); });
        _executeSearchCommand = executeSearchCommand;

        this.ObservableForProperty&amp;lt;ViewModel, string&amp;gt;(&quot;SearchText&quot;)
            .Throttle(TimeSpan.FromMilliseconds(800))
            .Select(x =&amp;gt; x.Value)
            .DistinctUntilChanged()
            .Where(x =&amp;gt; !string.IsNullOrWhiteSpace(x))
            .Subscribe(_executeSearchCommand.Execute);

        _searchResults = new ObservableAsPropertyHelper&amp;lt;ObservableCollection&amp;lt;Item&amp;gt;&amp;gt;(results, _ =&amp;gt; raisePropertyChanged(&quot;SearchResults&quot;));

    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you can cut down a lot of event handling code using Rx and reckon much easier to read without the need for multiple event handler methods.&lt;/p&gt;

&lt;p&gt;The full code sample is available on:
&lt;a href=&quot;https://github.com/rubans/gitprojects/tree/master/RadAutoCompleteExample/MinimumPopulateDelayRx&quot;&gt;https://github.com/rubans/gitprojects/tree/master/RadAutoCompleteExample/MinimumPopulateDelayRx&lt;/a&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000//autocomplete-control-using-rx/&quot;&gt;Autocomplete Control Using Rx&lt;/a&gt; was originally published by Ruban Siva at &lt;a href=&quot;http://localhost:4000/&quot;&gt;Coding Adventures!&lt;/a&gt; on July 02, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Installing Ruby on Windows, the easy Way]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000//installing-ruby-on-windows-the-easy-way/"/>
  <id>http://localhost:4000//installing-ruby-on-windows-the-easy-way</id>
  <published>2014-06-26T00:00:00+01:00</published>
  <updated>2014-06-26T00:00:00+01:00</updated>
  <author>
    <name>Ruban Siva</name>
    <uri>http://localhost:4000/</uri>
    <email>rubansiva@hotmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;There are various ways to setup Ruby and Rails on Windows, but the easiest and quickest way I found to do it was using the Rails bundler for windows found here:
&lt;a href=&quot;http://railsinstaller.org/en&quot;&gt;http://railsinstaller.org/en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you then want to go further and install Jekyll, use the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:/Railsinstaller 
gem install jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000//installing-ruby-on-windows-the-easy-way/&quot;&gt;Installing Ruby on Windows, the easy Way&lt;/a&gt; was originally published by Ruban Siva at &lt;a href=&quot;http://localhost:4000/&quot;&gt;Coding Adventures!&lt;/a&gt; on June 26, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Comparing Excel files]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000//comparing-excel-files/"/>
  <id>http://localhost:4000//comparing-excel-files</id>
  <published>2014-05-05T00:00:00+01:00</published>
  <updated>2014-05-05T00:00:00+01:00</updated>
  <author>
    <name>Ruban Siva</name>
    <uri>http://localhost:4000/</uri>
    <email>rubansiva@hotmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;I sometimes have the need to compare between different versions of a CSV or Excel file. Often to compare data differences between older and newer versions of the file.&lt;/p&gt;

&lt;p&gt;When it’s just a simple CSV file then I initially used some powershell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Compare-Object $(Get-Content c:\Tfs\Dev\DataDiff\basesample.csv) $(Get-Content C:\Tfs\Dev\DataDiff\samplewithdiffvalues.csv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This did the job, then I found a decent free comparer for Excel (not CSV format)
&lt;a href=&quot;http://www.grigsoft.com/wincmp3.htm&quot;&gt;http://www.grigsoft.com/wincmp3.htm)&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If you don’t mind paying a little extra and well worth the licence by the way for the comprehensive compare options it offers (not just Excel), Beyond Compare is great for this.&lt;/p&gt;

&lt;p&gt;However, I recently found a free add Included as part of Excel 2013 which offers great way of visualising the differences:
&lt;a href=&quot;http://office.microsoft.com/en-001/excel-help/what-you-can-do-with-spreadsheet-inquire-HA102835926.aspx&quot;&gt;http://office.microsoft.com/en-001/excel-help/what-you-can-do-with-spreadsheet-inquire-HA102835926.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s also available from your start menu (Windows 7) or through Search Charm (Windows 8) as Speadsheet Compare 2013.
&lt;img src=&quot;../Images/posts/SpreadsheetCompare2013.jpg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000//comparing-excel-files/&quot;&gt;Comparing Excel files&lt;/a&gt; was originally published by Ruban Siva at &lt;a href=&quot;http://localhost:4000/&quot;&gt;Coding Adventures!&lt;/a&gt; on May 05, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Add tracing to a legacy ASMX service]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000//add-tracing-to-a-legacy-asmx-service/"/>
  <id>http://localhost:4000//add-tracing-to-a-legacy-asmx-service</id>
  <published>2014-02-05T00:00:00+00:00</published>
  <updated>2014-02-05T00:00:00+00:00</updated>
  <author>
    <name>Ruban Siva</name>
    <uri>http://localhost:4000/</uri>
    <email>rubansiva@hotmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;To add tracing to legacy ASMX service for detailed trouble shooting, add the following to the web.config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;system.diagnostics&amp;gt;
    &amp;lt;trace autoflush=&quot;true&quot; /&amp;gt;
    &amp;lt;sources&amp;gt;
    &amp;lt;source name=&quot;System.Web.Services.Asmx&quot;&amp;gt;
    &amp;lt;listeners&amp;gt;
	      &amp;lt;add type=&quot;System.Diagnostics.DefaultTraceListener&quot; name=&quot;Default&quot;&amp;gt;
	    	&amp;lt;filter type=&quot;&quot; /&amp;gt;
	      &amp;lt;/add&amp;gt;
	      &amp;lt;add initializeData=&quot;local.log&quot; type=&quot;System.Diagnostics.TextWriterTraceListener&quot;
	    name=&quot;AsmxTraceFile&quot; traceOutputOptions=&quot;LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId&quot;&amp;gt;
	    	&amp;lt;filter type=&quot;&quot; /&amp;gt;
	      &amp;lt;/add&amp;gt;
    &amp;lt;/listeners&amp;gt;
      &amp;lt;/source&amp;gt;
    
    &amp;lt;/sources&amp;gt;
    &amp;lt;switches&amp;gt;
    	&amp;lt;add name=&quot;System.Web.Services.Asmx&quot; value=&quot;Verbose&quot;  /&amp;gt;
    &amp;lt;/switches&amp;gt;
&amp;lt;/system.diagnostics&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000//add-tracing-to-a-legacy-asmx-service/&quot;&gt;Add tracing to a legacy ASMX service&lt;/a&gt; was originally published by Ruban Siva at &lt;a href=&quot;http://localhost:4000/&quot;&gt;Coding Adventures!&lt;/a&gt; on February 05, 2014.&lt;/p&gt;</content>
</entry>

</feed>
